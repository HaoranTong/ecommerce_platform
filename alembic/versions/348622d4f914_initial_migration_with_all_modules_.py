"""Initial migration with all modules including member system

Revision ID: 348622d4f914
Revises: 
Create Date: 2025-09-17 21:18:17.971393

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '348622d4f914'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('brands',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('slug', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('logo_url', sa.String(length=500), nullable=True),
    sa.Column('website_url', sa.String(length=500), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('slug')
    )
    op.create_index(op.f('ix_brands_id'), 'brands', ['id'], unique=False)
    op.create_table('categories',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_table('member_activities',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('activity_code', sa.String(length=50), nullable=False, comment='活动代码'),
    sa.Column('activity_name', sa.String(length=100), nullable=False, comment='活动名称'),
    sa.Column('activity_type', sa.String(length=30), nullable=False, comment='活动类型'),
    sa.Column('description', sa.Text(), nullable=True, comment='活动描述'),
    sa.Column('rules', sa.JSON(), nullable=True, comment='活动规则配置'),
    sa.Column('reward_config', sa.JSON(), nullable=True, comment='奖励配置'),
    sa.Column('start_date', sa.Date(), nullable=True, comment='活动开始日期'),
    sa.Column('end_date', sa.Date(), nullable=True, comment='活动结束日期'),
    sa.Column('max_participants', sa.Integer(), nullable=True, comment='最大参与人数限制'),
    sa.Column('min_level_id', sa.Integer(), nullable=True, comment='最低参与等级'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='是否激活'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('activity_code')
    )
    op.create_index('idx_activity_type', 'member_activities', ['activity_type'], unique=False)
    op.create_index('idx_is_active', 'member_activities', ['is_active'], unique=False)
    op.create_index('idx_start_end_date', 'member_activities', ['start_date', 'end_date'], unique=False)
    op.create_index(op.f('ix_member_activities_id'), 'member_activities', ['id'], unique=False)
    op.create_index('uk_activity_code', 'member_activities', ['activity_code'], unique=True)
    op.create_table('membership_levels',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('level_name', sa.String(length=50), nullable=False, comment='等级名称，如注册会员、铜牌会员'),
    sa.Column('level_code', sa.String(length=20), nullable=False, comment='等级代码，如BASIC、BRONZE'),
    sa.Column('required_spent', sa.DECIMAL(precision=15, scale=2), nullable=False, comment='达到该等级所需累计消费'),
    sa.Column('discount_rate', sa.DECIMAL(precision=4, scale=3), nullable=False, comment='折扣率，0.9表示9折'),
    sa.Column('point_multiplier', sa.DECIMAL(precision=4, scale=2), nullable=False, comment='积分倍率'),
    sa.Column('level_order', sa.Integer(), nullable=False, comment='等级排序，数字越大等级越高'),
    sa.Column('description', sa.Text(), nullable=True, comment='等级描述'),
    sa.Column('benefits', sa.JSON(), nullable=True, comment='等级基础权益配置JSON'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='是否激活'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('level_code')
    )
    op.create_index('idx_level_order', 'membership_levels', ['level_order'], unique=False)
    op.create_index('idx_required_spent', 'membership_levels', ['required_spent'], unique=False)
    op.create_index(op.f('ix_membership_levels_id'), 'membership_levels', ['id'], unique=False)
    op.create_index('uk_level_code', 'membership_levels', ['level_code'], unique=True)
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('resource', sa.String(length=100), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_permissions_id'), 'permissions', ['id'], unique=False)
    op.create_index(op.f('ix_permissions_name'), 'permissions', ['name'], unique=True)
    op.create_table('roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.create_table('system_configs',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('config_key', sa.String(length=100), nullable=False, comment='配置键名'),
    sa.Column('config_name', sa.String(length=200), nullable=False, comment='配置名称'),
    sa.Column('config_category', sa.String(length=50), nullable=False, comment='配置分类'),
    sa.Column('config_value', sa.Text(), nullable=False, comment='配置值'),
    sa.Column('default_value', sa.Text(), nullable=True, comment='默认值'),
    sa.Column('value_type', sa.String(length=20), nullable=False, comment='值类型'),
    sa.Column('description', sa.Text(), nullable=True, comment='配置说明'),
    sa.Column('valid_options', sa.JSON(), nullable=True, comment='有效选项列表'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='是否激活'),
    sa.Column('is_readonly', sa.Boolean(), nullable=False, comment='是否只读'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('config_key')
    )
    op.create_index('idx_config_category', 'system_configs', ['config_category'], unique=False)
    op.create_index('idx_is_active', 'system_configs', ['is_active'], unique=False)
    op.create_index(op.f('ix_system_configs_id'), 'system_configs', ['id'], unique=False)
    op.create_index('uk_config_key', 'system_configs', ['config_key'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('email_verified', sa.Boolean(), nullable=False),
    sa.Column('phone_verified', sa.Boolean(), nullable=False),
    sa.Column('two_factor_enabled', sa.Boolean(), nullable=False),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('real_name', sa.String(length=100), nullable=True),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('wx_openid', sa.String(length=100), nullable=True),
    sa.Column('wx_unionid', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('wx_openid'),
    sa.UniqueConstraint('wx_unionid')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('members',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('member_code', sa.String(length=20), nullable=False, comment='会员编号，如M202409170001'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='关联用户ID'),
    sa.Column('level_id', sa.Integer(), nullable=False, comment='当前会员等级ID'),
    sa.Column('total_spent', sa.DECIMAL(precision=15, scale=2), nullable=False, comment='累计消费金额'),
    sa.Column('total_points', sa.BigInteger(), nullable=False, comment='历史累计获得积分'),
    sa.Column('available_points', sa.BigInteger(), nullable=False, comment='当前可用积分'),
    sa.Column('frozen_points', sa.BigInteger(), nullable=False, comment='冻结积分'),
    sa.Column('join_date', sa.Date(), nullable=False, comment='入会日期'),
    sa.Column('last_active_at', sa.DateTime(), nullable=True, comment='最后活跃时间'),
    sa.Column('birthday', sa.Date(), nullable=True, comment='生日'),
    sa.Column('preferences', sa.JSON(), nullable=True, comment='偏好设置(通知、营销等)'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='状态: active=正常, frozen=冻结, cancelled=注销'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('available_points >= 0', name='check_available_points_non_negative'),
    sa.CheckConstraint('total_spent >= 0', name='check_total_spent_non_negative'),
    sa.ForeignKeyConstraint(['level_id'], ['membership_levels.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('member_code'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index('idx_join_date', 'members', ['join_date'], unique=False)
    op.create_index('idx_level_id', 'members', ['level_id'], unique=False)
    op.create_index('idx_status', 'members', ['status'], unique=False)
    op.create_index('idx_total_spent', 'members', ['total_spent'], unique=False)
    op.create_index(op.f('ix_members_id'), 'members', ['id'], unique=False)
    op.create_index('uk_member_code', 'members', ['member_code'], unique=True)
    op.create_index('uk_user_id', 'members', ['user_id'], unique=True)
    op.create_table('membership_benefits',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('benefit_code', sa.String(length=50), nullable=False, comment='权益代码'),
    sa.Column('benefit_name', sa.String(length=100), nullable=False, comment='权益名称'),
    sa.Column('benefit_type', sa.String(length=30), nullable=False, comment='权益类型'),
    sa.Column('level_id', sa.Integer(), nullable=False, comment='适用等级ID'),
    sa.Column('benefit_value', sa.DECIMAL(precision=10, scale=4), nullable=True, comment='权益数值'),
    sa.Column('usage_limit', sa.Integer(), nullable=True, comment='使用次数限制，NULL为无限制'),
    sa.Column('valid_period', sa.Integer(), nullable=True, comment='有效期(天)，NULL为永久有效'),
    sa.Column('description', sa.Text(), nullable=True, comment='权益描述'),
    sa.Column('config', sa.JSON(), nullable=True, comment='权益配置参数'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='是否激活'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['level_id'], ['membership_levels.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_benefit_type', 'membership_benefits', ['benefit_type'], unique=False)
    op.create_index('idx_level_id', 'membership_benefits', ['level_id'], unique=False)
    op.create_index(op.f('ix_membership_benefits_id'), 'membership_benefits', ['id'], unique=False)
    op.create_index('uk_benefit_level', 'membership_benefits', ['benefit_code', 'level_id'], unique=True)
    op.create_table('orders',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('order_number', sa.String(length=32), nullable=False, comment='订单号'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='用户ID'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='订单状态'),
    sa.Column('subtotal', sa.Numeric(precision=10, scale=2), nullable=False, comment='小计金额'),
    sa.Column('shipping_fee', sa.Numeric(precision=10, scale=2), nullable=False, comment='运费'),
    sa.Column('discount_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='折扣金额'),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='总金额'),
    sa.Column('shipping_address', sa.Text(), nullable=True, comment='收货地址'),
    sa.Column('shipping_method', sa.String(length=50), nullable=True, comment='配送方式'),
    sa.Column('notes', sa.Text(), nullable=True, comment='订单备注'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='更新时间'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_order_number'), 'orders', ['order_number'], unique=True)
    op.create_index(op.f('ix_orders_user_id'), 'orders', ['user_id'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('brand_id', sa.Integer(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.Column('seo_title', sa.String(length=200), nullable=True),
    sa.Column('seo_description', sa.Text(), nullable=True),
    sa.Column('seo_keywords', sa.String(length=500), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('sale_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['brand_id'], ['brands.id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_products_brand_category', 'products', ['brand_id', 'category_id'], unique=False)
    op.create_index('idx_products_sale_count', 'products', ['sale_count'], unique=False)
    op.create_index('idx_products_status_published', 'products', ['status', 'published_at'], unique=False)
    op.create_index('idx_products_view_count', 'products', ['view_count'], unique=False)
    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)
    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('granted_by', sa.Integer(), nullable=True),
    sa.Column('granted_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('sessions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('last_accessed_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sessions_id'), 'sessions', ['id'], unique=False)
    op.create_index(op.f('ix_sessions_token_hash'), 'sessions', ['token_hash'], unique=True)
    op.create_index(op.f('ix_sessions_user_id'), 'sessions', ['user_id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('assigned_by', sa.Integer(), nullable=True),
    sa.Column('assigned_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('activity_participations',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('member_id', sa.BigInteger(), nullable=False, comment='会员ID'),
    sa.Column('activity_id', sa.BigInteger(), nullable=False, comment='活动ID'),
    sa.Column('participation_date', sa.Date(), nullable=False, comment='参与日期'),
    sa.Column('completion_status', sa.String(length=20), nullable=False, comment='完成状态'),
    sa.Column('completion_time', sa.DateTime(), nullable=True, comment='完成时间'),
    sa.Column('reward_points', sa.Integer(), nullable=True, comment='获得积分'),
    sa.Column('reward_items', sa.JSON(), nullable=True, comment='获得物品/权益'),
    sa.Column('participation_data', sa.JSON(), nullable=True, comment='参与相关数据'),
    sa.Column('notes', sa.String(length=500), nullable=True, comment='备注信息'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['member_activities.id'], ),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('member_id', 'activity_id', 'participation_date', name='uk_member_activity_date')
    )
    op.create_index('idx_completion_status', 'activity_participations', ['completion_status'], unique=False)
    op.create_index('idx_member_activity', 'activity_participations', ['member_id', 'activity_id'], unique=False)
    op.create_index('idx_participation_date', 'activity_participations', ['participation_date'], unique=False)
    op.create_index(op.f('ix_activity_participations_id'), 'activity_participations', ['id'], unique=False)
    op.create_table('benefit_usages',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('member_id', sa.BigInteger(), nullable=False, comment='会员ID'),
    sa.Column('benefit_id', sa.BigInteger(), nullable=False, comment='权益ID'),
    sa.Column('usage_date', sa.Date(), nullable=False, comment='使用日期'),
    sa.Column('usage_amount', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='使用金额/数量'),
    sa.Column('related_order_id', sa.BigInteger(), nullable=True, comment='关联订单ID'),
    sa.Column('usage_details', sa.JSON(), nullable=True, comment='使用详细信息'),
    sa.Column('usage_result', sa.String(length=200), nullable=True, comment='使用结果描述'),
    sa.Column('is_valid', sa.Boolean(), nullable=False, comment='是否有效'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['benefit_id'], ['membership_benefits.id'], ),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_is_valid', 'benefit_usages', ['is_valid'], unique=False)
    op.create_index('idx_member_benefit', 'benefit_usages', ['member_id', 'benefit_id'], unique=False)
    op.create_index('idx_related_order_id', 'benefit_usages', ['related_order_id'], unique=False)
    op.create_index('idx_usage_date', 'benefit_usages', ['usage_date'], unique=False)
    op.create_index(op.f('ix_benefit_usages_id'), 'benefit_usages', ['id'], unique=False)
    op.create_table('order_status_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False, comment='订单ID'),
    sa.Column('old_status', sa.String(length=20), nullable=True, comment='原状态'),
    sa.Column('new_status', sa.String(length=20), nullable=False, comment='新状态'),
    sa.Column('remark', sa.Text(), nullable=True, comment='状态变更备注'),
    sa.Column('operator_id', sa.Integer(), nullable=True, comment='操作人ID'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='变更时间'),
    sa.ForeignKeyConstraint(['operator_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_status_history_order_id'), 'order_status_history', ['order_id'], unique=False)
    op.create_table('point_transactions',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('transaction_code', sa.String(length=30), nullable=False, comment='交易编号'),
    sa.Column('member_id', sa.BigInteger(), nullable=False, comment='会员ID'),
    sa.Column('transaction_type', sa.String(length=30), nullable=False, comment='交易类型'),
    sa.Column('points_amount', sa.BigInteger(), nullable=False, comment='积分数量，正数为获得，负数为消费'),
    sa.Column('balance_after', sa.BigInteger(), nullable=False, comment='交易后余额'),
    sa.Column('related_order_id', sa.BigInteger(), nullable=True, comment='关联订单ID'),
    sa.Column('related_activity_id', sa.BigInteger(), nullable=True, comment='关联活动ID'),
    sa.Column('description', sa.String(length=200), nullable=True, comment='交易描述'),
    sa.Column('source_system', sa.String(length=50), nullable=True, comment='来源系统'),
    sa.Column('operator_id', sa.BigInteger(), nullable=True, comment='操作员ID（人工调整时）'),
    sa.Column('expires_at', sa.DateTime(), nullable=True, comment='积分过期时间'),
    sa.Column('is_expired', sa.Boolean(), nullable=False, comment='是否已过期'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_code')
    )
    op.create_index('idx_created_at', 'point_transactions', ['created_at'], unique=False)
    op.create_index('idx_expires_at', 'point_transactions', ['expires_at'], unique=False)
    op.create_index('idx_member_id', 'point_transactions', ['member_id'], unique=False)
    op.create_index('idx_related_order_id', 'point_transactions', ['related_order_id'], unique=False)
    op.create_index('idx_transaction_type', 'point_transactions', ['transaction_type'], unique=False)
    op.create_index(op.f('ix_point_transactions_id'), 'point_transactions', ['id'], unique=False)
    op.create_index('uk_transaction_code', 'point_transactions', ['transaction_code'], unique=True)
    op.create_table('product_attributes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('attribute_name', sa.String(length=100), nullable=False),
    sa.Column('attribute_value', sa.String(length=500), nullable=False),
    sa.Column('attribute_type', sa.String(length=20), nullable=False),
    sa.Column('is_searchable', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_product_attributes_id'), 'product_attributes', ['id'], unique=False)
    op.create_table('product_tags',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('tag_name', sa.String(length=50), nullable=False),
    sa.Column('tag_type', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_product_tags_id'), 'product_tags', ['id'], unique=False)
    op.create_index('uk_product_tags_product_name', 'product_tags', ['product_id', 'tag_name'], unique=True)
    op.create_table('skus',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('sku_code', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=True),
    sa.Column('price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('cost_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('market_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('weight', sa.DECIMAL(precision=8, scale=3), nullable=True),
    sa.Column('volume', sa.DECIMAL(precision=8, scale=3), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sku_code')
    )
    op.create_index('idx_skus_product_active', 'skus', ['product_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_skus_id'), 'skus', ['id'], unique=False)
    op.create_table('inventory_stocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sku_id', sa.Integer(), nullable=False, comment='SKU ID'),
    sa.Column('total_quantity', sa.Integer(), nullable=False, comment='总库存数量'),
    sa.Column('available_quantity', sa.Integer(), nullable=False, comment='可用库存数量'),
    sa.Column('reserved_quantity', sa.Integer(), nullable=False, comment='预占库存数量'),
    sa.Column('warning_threshold', sa.Integer(), nullable=False, comment='库存预警阈值'),
    sa.Column('critical_threshold', sa.Integer(), nullable=False, comment='库存严重不足阈值'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='是否启用库存管理'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['sku_id'], ['skus.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_inventory_stocks_available_quantity', 'inventory_stocks', ['available_quantity'], unique=False)
    op.create_index('idx_inventory_stocks_sku_id', 'inventory_stocks', ['sku_id'], unique=False)
    op.create_index('idx_inventory_stocks_warning_threshold', 'inventory_stocks', ['warning_threshold'], unique=False)
    op.create_index(op.f('ix_inventory_stocks_id'), 'inventory_stocks', ['id'], unique=False)
    op.create_index(op.f('ix_inventory_stocks_sku_id'), 'inventory_stocks', ['sku_id'], unique=True)
    op.create_table('order_items',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False, comment='订单ID'),
    sa.Column('product_id', sa.Integer(), nullable=False, comment='商品ID'),
    sa.Column('sku_id', sa.Integer(), nullable=False, comment='SKU ID'),
    sa.Column('sku_code', sa.String(length=100), nullable=False, comment='SKU编码快照'),
    sa.Column('product_name', sa.String(length=200), nullable=False, comment='商品名称快照'),
    sa.Column('sku_name', sa.String(length=200), nullable=False, comment='SKU名称快照'),
    sa.Column('quantity', sa.Integer(), nullable=False, comment='商品数量'),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False, comment='单价快照'),
    sa.Column('total_price', sa.Numeric(precision=10, scale=2), nullable=False, comment='小计金额'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='创建时间'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['sku_id'], ['skus.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_items_order_id'), 'order_items', ['order_id'], unique=False)
    op.create_index(op.f('ix_order_items_product_id'), 'order_items', ['product_id'], unique=False)
    op.create_index(op.f('ix_order_items_sku_id'), 'order_items', ['sku_id'], unique=False)
    op.create_table('product_images',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('sku_id', sa.Integer(), nullable=True),
    sa.Column('image_url', sa.String(length=500), nullable=False),
    sa.Column('alt_text', sa.String(length=200), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sku_id'], ['skus.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_product_images_id'), 'product_images', ['id'], unique=False)
    op.create_table('sku_attributes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sku_id', sa.Integer(), nullable=False),
    sa.Column('attribute_name', sa.String(length=100), nullable=False),
    sa.Column('attribute_value', sa.String(length=200), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['sku_id'], ['skus.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sku_attributes_id'), 'sku_attributes', ['id'], unique=False)
    op.create_index('uk_sku_attributes_sku_name', 'sku_attributes', ['sku_id', 'attribute_name'], unique=True)
    op.create_table('inventory_reservations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sku_id', sa.Integer(), nullable=False, comment='SKU ID'),
    sa.Column('reservation_type', sa.Enum('CART', 'ORDER', name='reservationtype'), nullable=False, comment='预占类型'),
    sa.Column('reference_id', sa.String(length=100), nullable=False, comment='关联ID（用户ID或订单ID）'),
    sa.Column('quantity', sa.Integer(), nullable=False, comment='预占数量'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='过期时间'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='是否有效'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['sku_id'], ['inventory_stocks.sku_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_inventory_reservations_expires_at', 'inventory_reservations', ['expires_at'], unique=False)
    op.create_index('idx_inventory_reservations_is_active', 'inventory_reservations', ['is_active'], unique=False)
    op.create_index('idx_inventory_reservations_reference_id', 'inventory_reservations', ['reference_id'], unique=False)
    op.create_index('idx_inventory_reservations_reservation_type', 'inventory_reservations', ['reservation_type'], unique=False)
    op.create_index('idx_inventory_reservations_sku_id', 'inventory_reservations', ['sku_id'], unique=False)
    op.create_index(op.f('ix_inventory_reservations_id'), 'inventory_reservations', ['id'], unique=False)
    op.create_table('inventory_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sku_id', sa.Integer(), nullable=False, comment='SKU ID'),
    sa.Column('transaction_type', sa.Enum('RESERVE', 'RELEASE', 'DEDUCT', 'ADJUST', 'RESTOCK', name='transactiontype'), nullable=False, comment='变动类型'),
    sa.Column('quantity_change', sa.Integer(), nullable=False, comment='变动数量（正数为增加，负数为减少）'),
    sa.Column('quantity_before', sa.Integer(), nullable=False, comment='变动前数量'),
    sa.Column('quantity_after', sa.Integer(), nullable=False, comment='变动后数量'),
    sa.Column('reference_type', sa.String(length=50), nullable=True, comment='关联类型（order/cart/manual等）'),
    sa.Column('reference_id', sa.String(length=100), nullable=True, comment='关联ID'),
    sa.Column('operator_id', sa.Integer(), nullable=True, comment='操作人ID'),
    sa.Column('reason', sa.Text(), nullable=True, comment='变动原因'),
    sa.Column('notes', sa.Text(), nullable=True, comment='备注信息'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['sku_id'], ['inventory_stocks.sku_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_inventory_transactions_created_at', 'inventory_transactions', ['created_at'], unique=False)
    op.create_index('idx_inventory_transactions_operator_id', 'inventory_transactions', ['operator_id'], unique=False)
    op.create_index('idx_inventory_transactions_reference_id', 'inventory_transactions', ['reference_id'], unique=False)
    op.create_index('idx_inventory_transactions_sku_id', 'inventory_transactions', ['sku_id'], unique=False)
    op.create_index('idx_inventory_transactions_transaction_type', 'inventory_transactions', ['transaction_type'], unique=False)
    op.create_index(op.f('ix_inventory_transactions_id'), 'inventory_transactions', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_inventory_transactions_id'), table_name='inventory_transactions')
    op.drop_index('idx_inventory_transactions_transaction_type', table_name='inventory_transactions')
    op.drop_index('idx_inventory_transactions_sku_id', table_name='inventory_transactions')
    op.drop_index('idx_inventory_transactions_reference_id', table_name='inventory_transactions')
    op.drop_index('idx_inventory_transactions_operator_id', table_name='inventory_transactions')
    op.drop_index('idx_inventory_transactions_created_at', table_name='inventory_transactions')
    op.drop_table('inventory_transactions')
    op.drop_index(op.f('ix_inventory_reservations_id'), table_name='inventory_reservations')
    op.drop_index('idx_inventory_reservations_sku_id', table_name='inventory_reservations')
    op.drop_index('idx_inventory_reservations_reservation_type', table_name='inventory_reservations')
    op.drop_index('idx_inventory_reservations_reference_id', table_name='inventory_reservations')
    op.drop_index('idx_inventory_reservations_is_active', table_name='inventory_reservations')
    op.drop_index('idx_inventory_reservations_expires_at', table_name='inventory_reservations')
    op.drop_table('inventory_reservations')
    op.drop_index('uk_sku_attributes_sku_name', table_name='sku_attributes')
    op.drop_index(op.f('ix_sku_attributes_id'), table_name='sku_attributes')
    op.drop_table('sku_attributes')
    op.drop_index(op.f('ix_product_images_id'), table_name='product_images')
    op.drop_table('product_images')
    op.drop_index(op.f('ix_order_items_sku_id'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_product_id'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_order_id'), table_name='order_items')
    op.drop_table('order_items')
    op.drop_index(op.f('ix_inventory_stocks_sku_id'), table_name='inventory_stocks')
    op.drop_index(op.f('ix_inventory_stocks_id'), table_name='inventory_stocks')
    op.drop_index('idx_inventory_stocks_warning_threshold', table_name='inventory_stocks')
    op.drop_index('idx_inventory_stocks_sku_id', table_name='inventory_stocks')
    op.drop_index('idx_inventory_stocks_available_quantity', table_name='inventory_stocks')
    op.drop_table('inventory_stocks')
    op.drop_index(op.f('ix_skus_id'), table_name='skus')
    op.drop_index('idx_skus_product_active', table_name='skus')
    op.drop_table('skus')
    op.drop_index('uk_product_tags_product_name', table_name='product_tags')
    op.drop_index(op.f('ix_product_tags_id'), table_name='product_tags')
    op.drop_table('product_tags')
    op.drop_index(op.f('ix_product_attributes_id'), table_name='product_attributes')
    op.drop_table('product_attributes')
    op.drop_index('uk_transaction_code', table_name='point_transactions')
    op.drop_index(op.f('ix_point_transactions_id'), table_name='point_transactions')
    op.drop_index('idx_transaction_type', table_name='point_transactions')
    op.drop_index('idx_related_order_id', table_name='point_transactions')
    op.drop_index('idx_member_id', table_name='point_transactions')
    op.drop_index('idx_expires_at', table_name='point_transactions')
    op.drop_index('idx_created_at', table_name='point_transactions')
    op.drop_table('point_transactions')
    op.drop_index(op.f('ix_order_status_history_order_id'), table_name='order_status_history')
    op.drop_table('order_status_history')
    op.drop_index(op.f('ix_benefit_usages_id'), table_name='benefit_usages')
    op.drop_index('idx_usage_date', table_name='benefit_usages')
    op.drop_index('idx_related_order_id', table_name='benefit_usages')
    op.drop_index('idx_member_benefit', table_name='benefit_usages')
    op.drop_index('idx_is_valid', table_name='benefit_usages')
    op.drop_table('benefit_usages')
    op.drop_index(op.f('ix_activity_participations_id'), table_name='activity_participations')
    op.drop_index('idx_participation_date', table_name='activity_participations')
    op.drop_index('idx_member_activity', table_name='activity_participations')
    op.drop_index('idx_completion_status', table_name='activity_participations')
    op.drop_table('activity_participations')
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_sessions_user_id'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_token_hash'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_id'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_table('role_permissions')
    op.drop_index(op.f('ix_products_id'), table_name='products')
    op.drop_index('idx_products_view_count', table_name='products')
    op.drop_index('idx_products_status_published', table_name='products')
    op.drop_index('idx_products_sale_count', table_name='products')
    op.drop_index('idx_products_brand_category', table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_orders_user_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_order_number'), table_name='orders')
    op.drop_table('orders')
    op.drop_index('uk_benefit_level', table_name='membership_benefits')
    op.drop_index(op.f('ix_membership_benefits_id'), table_name='membership_benefits')
    op.drop_index('idx_level_id', table_name='membership_benefits')
    op.drop_index('idx_benefit_type', table_name='membership_benefits')
    op.drop_table('membership_benefits')
    op.drop_index('uk_user_id', table_name='members')
    op.drop_index('uk_member_code', table_name='members')
    op.drop_index(op.f('ix_members_id'), table_name='members')
    op.drop_index('idx_total_spent', table_name='members')
    op.drop_index('idx_status', table_name='members')
    op.drop_index('idx_level_id', table_name='members')
    op.drop_index('idx_join_date', table_name='members')
    op.drop_table('members')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index('uk_config_key', table_name='system_configs')
    op.drop_index(op.f('ix_system_configs_id'), table_name='system_configs')
    op.drop_index('idx_is_active', table_name='system_configs')
    op.drop_index('idx_config_category', table_name='system_configs')
    op.drop_table('system_configs')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_permissions_name'), table_name='permissions')
    op.drop_index(op.f('ix_permissions_id'), table_name='permissions')
    op.drop_table('permissions')
    op.drop_index('uk_level_code', table_name='membership_levels')
    op.drop_index(op.f('ix_membership_levels_id'), table_name='membership_levels')
    op.drop_index('idx_required_spent', table_name='membership_levels')
    op.drop_index('idx_level_order', table_name='membership_levels')
    op.drop_table('membership_levels')
    op.drop_index('uk_activity_code', table_name='member_activities')
    op.drop_index(op.f('ix_member_activities_id'), table_name='member_activities')
    op.drop_index('idx_start_end_date', table_name='member_activities')
    op.drop_index('idx_is_active', table_name='member_activities')
    op.drop_index('idx_activity_type', table_name='member_activities')
    op.drop_table('member_activities')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    op.drop_index(op.f('ix_brands_id'), table_name='brands')
    op.drop_table('brands')
    # ### end Alembic commands ###
